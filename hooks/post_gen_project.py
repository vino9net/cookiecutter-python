import json
import os
import shlex
import shutil
import subprocess

context = json.loads(
    """
{{ cookiecutter | jsonify }}
"""
)

dockerfile_option = context["dockerfile_option"]
extra_packages = context["extra_packages"]
pkg_name = context["pkg_name"]
use_devcontainer = context["use_devcontainer"]

if use_devcontainer != "Yes":
    shutil.rmtree(".devcontainer")

if dockerfile_option == "None":
    # none
    shutil.rmtree(".github")
    os.unlink("Dockerfile")
    os.unlink(".dockerignore")
    os.unlink("entrypoint.sh")
elif dockerfile_option == "Dockerfile only":
    shutil.rmtree(".github")
else:
    # dockerfile and github workflow
    print(
        """
    Github workflow has been generated under .github/workflows directory. To create the
    corresponding Github repository, please run the following command:

        cd {{ cookiecutter.project_slug }}
        gh repo create {{ cookiecutter.project_slug }} --source=. --public
        git push -u origin develop

    Please ensure the workflow permission is seting to 'Read and write permissions' to
    enable pushing container images to Github container registry.

    """
    )

if "tortoise-orm" not in extra_packages:
    os.unlink(f"{pkg_name}/models.py")
    os.unlink("tests/test_models.py")
    shutil.rmtree("migrations")

if "fastapi" not in extra_packages:
    os.unlink(f"{pkg_name}/api.py")
    os.unlink("tests/test_server.py")
    os.unlink("tests/jwt_utils.py")
    os.unlink("settings.py")
    os.unlink("security.py")
    shutil.rmtree("tests/mockdata/jwt")


# create a git repo, everybody needs this, right?
print("Initializing git repo...")
subprocess.call(shlex.split("git init"))
subprocess.call(shlex.split("git checkout -b develop"))
subprocess.call(shlex.split("git add .gitignore .dockerignore"))
subprocess.call(shlex.split("git add *"))
subprocess.call(
    shlex.split('git commit -m "generated by cookiecutter"'),
    stdout=subprocess.DEVNULL,
)

# print some help messages
home = os.path.expanduser("~")
relpath = os.path.relpath(os.getcwd(), home)
print(
    f"""
    # To start working on the project,

    cd ~/{relpath}

    """
)

print(
    """

    uv sync

    # install pre-commit to ensure linting tools are run before code is committed
    uv run pre-commit install

    # activate new venv
    source .venv/bin/activate

    # Hack away!

    """
)
